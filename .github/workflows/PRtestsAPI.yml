name: test

on:
  pull_request:
    paths:
      - "electrostoreAPI/**"
      - "tests/electrostoreAPI/**"

jobs:
  test-api:
    name: tests - API
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./electrostoreAPI
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up C#
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '7.0.x'
    - name: Install dependencies
      run: dotnet restore
    - name: Run tests and collect coverage (OpenCover)
      run: |
        dotnet test ../tests/electrostoreAPI \
          --collect "XPlat Code Coverage" \
          --logger "trx;LogFileName=test-results.trx" \
          --results-directory ./TestResults \
          -- \
          DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
    - name: Publish code coverage
      uses: actions/upload-artifact@v4
      with:
        name: api-coverage
        path: electrostoreAPI/TestResults

  sonarqube-api:
    name: SonarQube - API
    needs:
      - test-api
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./electrostoreAPI
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up C#
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '7.0.x'
    - name: Download API coverage
      uses: actions/download-artifact@v4
      with:
        name: api-coverage
        path: api-coverage
    - name: Run SonarQube scan
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin /k:"electrostore-api" \
          /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.exclusions="**/Migrations/**" \
          /d:sonar.cpd.exclusions="**/DTO/**,**/Models/**" \
          /d:sonar.cs.vstest.reportsPaths=../api-coverage/*.trx \
          /d:sonar.cs.opencover.reportsPaths=../api-coverage/**/coverage.opencover.xml
        dotnet build
        dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
